neofetch
# bindkey -e
bindkey -v

export ZSH="$HOME/.oh-my-zsh"
plugins=(git vi-mode zsh-autosuggestions zsh-syntax-highlighting zsh-z docker)
source $ZSH/oh-my-zsh.sh

export PATH="/usr/local/sbin:$PATH"

# # This loads nvm
export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

# remove zsh correct
CORRECT_IGNORE_FILE='.*'

# GNU Tools
export PATH="$(brew --prefix)/opt/coreutils/libexec/gnubin:$PATH"
export PATH="$(brew --prefix)/opt/coreutils/libexec/gnubin:$PATH"

# Tfenv
export PATH="$HOME/.tfenv/bin:$PATH"

# Rust/Cargo
export PATH="$PATH:$HOME/.cargo/bin:$PATH"
# Rust/C/Cpp Debugger
export PATH="$PATH:$(brew --prefix)/opt/llvm/bin:$PATH"
export LDFLAGS="-L$(brew --prefix)/opt/llvm/lib"
export CPPFLAGS="-I$(brew --prefix)/opt/llvm/include"

# Go development
export GOPATH="${HOME}/.go"
export GOROOT="$(brew --prefix golang)/libexec"
export PATH="$PATH:${GOPATH}/bin:${GOROOT}/bin"

# enable command auto-correction.
ENABLE_CORRECTION="true"

# gcloud
source "$(brew --prefix)/Caskroom/google-cloud-sdk/latest/google-cloud-sdk/path.zsh.inc"
source "$(brew --prefix)/Caskroom/google-cloud-sdk/latest/google-cloud-sdk/completion.zsh.inc"

# aliases
alias l.='exa -a | egrep "^\."'
alias ls='exa -l --icons --color=always --group-directories-first'
alias ll='exa -al --icons --color=always --group-directories-first'
alias la='exa -a --icons --color=always --group-directories-first'
alias lt='exa -aT --icons --color=always --group-directories-first'

cd() { builtin cd "$@"; ll; }            # always list directory contents upon 'cd'
..() { builtin cd .. "$@"; ll; }         # always list directory contents upo '..'
mcd () { mkdir -p "$1" && cd "$1"; }     # makes new dir and jumps inside
alias DT='tee ~/Desktop/terminalOut.txt' # pipe content to file on MacOS Desktop
alias less='less -FSRXc'
alias cp='cp -iv'
alias mv='mv -iv'
alias mkdir='mkdir -pv'
alias .2='cd ../../'
alias .3='cd ../../../'
alias .4='cd ../../../../'
alias .5='cd ../../../../../'
alias .6='cd ../../../../../../'
alias f='open -a Finder ./'
alias c='clear'
alias q='exit'
alias h='history'
alias hs='history | grep'
alias path='echo -e ${PATH//:/\\n}'
alias untar='tar -zxvf'
alias wget='wget -c'
alias getpass='openssl rand -base64 20'
alias v='nvim'
alias python='python3.11'
alias grep='grep --color=auto'
alias egrep='egrep --color=auto'
alias fgrep='fgrep --color=auto'
alias header='curl -I'
alias nvpn='sudo killall openvpn'
alias vpn='sudo openvpn --config $HOME/Documents/vpn/client.ovpn --daemon'
alias update-os='sudo softwareupdate -i -a; brew update; brew upgrade'
alias ve='python3 -m venv ./venv'
alias va='source ./venv/bin/activate'
alias watch='watch '
alias df='df -h'
alias free='free -m'
alias weather="curl -4 wttr.in/berlin"
alias afk="pmset displaysleepnow"
alias s='fd --type f --hidden --exclude .git | fzf-tmux -p --reverse | xargs nvim'
alias tldrl='tldr --list | fzf --preview "tldr {1} --color=always" --preview-window=right,70% | xargs tdlr'

# gcloud
alias vmlist='gcloud compute instances list'
alias ssha='gcloud compute ssh --internal-ip --zone=europe-west3-a'
alias sshb='gcloud compute ssh --internal-ip --zone=europe-west3-b'
alias sshc='gcloud compute ssh --internal-ip --zone=europe-west3-c'

# gpg encryption
alias gpg-check='gpg2 --keyserver-options auto-key-retrieve --verify'          # verify signature for isos
alias gpg-retrieve='gpg2 --keyserver-options auto-key-retrieve --receive-keys' # receive the key of a developer
 
# broot
alias br='broot -dhp'
alias bs='broot --sizes'

# kubectl:  automate kube control commands
alias k='kubectl'
alias kg='kubectl get'
alias ke='kubectl edit'
alias kd='kubectl describe'
alias ks='kubectl scale'
alias kl='kubectl logs'
alias kt='kubectl top'
alias kx='kubectl exec'

# git: automate git commands
alias gg='git status'
alias gp='git pull'
alias gd='git diff'
alias gco='git checkout'
alias gl='git log'
alias gla="git log --graph --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%an%C(reset)%C(bold yellow)%d%C(reset) %C(dim white)- %s%C(reset)' --all"
alias gb='git branch --sort=-committerdate | fzf --header "Checkout Recent Branch" --preview "git diff --color=always {1}" --pointer=">" | xargs git checkout' # git branch
alias gbva='git branch -va'

# networking
alias ipe='curl ipinfo.io/ip'                      # external IP Address
alias ipi='ipconfig getifaddr en0'                 # internal IP Address
alias netCons='lsof -i'                            # show all open TCP/IP sockets
alias ping='ping -c 5'                             # ping 5 times only
alias flushDNS='dscacheutil -flushcache'           # flush out the DNS Cache
alias lsock='sudo /usr/sbin/lsof -i -P'            # display open sockets
alias lsockU='sudo /usr/sbin/lsof -nP | grep UDP'  # display only open UDP sockets
alias lsockT='sudo /usr/sbin/lsof -nP | grep TCP'  # display only open TCP sockets
alias ipInfo0='ipconfig getpacket en0'             # get info on connections for en0
alias ipInfo1='ipconfig getpacket en1'             # get info on connections for en1
alias openPorts='sudo lsof -i | grep LISTEN'       # all listening connections
alias showBlocked='sudo ipfw list'                 # all ipfw rules inc/ blocked IPs

# Docker config 
export DOCKER_BUILDKIT=0
export COMPOSE_DOCKER_CLI_BUILD=0

# HSTR configuration - add this to ~/.bashrc
export HSTR_CONFIG=hicolor       # get more colors
# shopt -s histappend              # append new history items to .bash_history
export HISTCONTROL=ignorespace   # leading space hides commands from history
export HISTFILESIZE=100000       # increase history file size (default is 500)
export HISTSIZE=${HISTFILESIZE}  # increase history size (default is 500)
# ensure synchronization between bash memory and history file
export PROMPT_COMMAND="history -a; history -n; ${PROMPT_COMMAND}"
# if this is interactive shell, then bind hstr to Ctrl-r (for Vi mode check doc)
# if [[ $- =~ .*i.* ]]; then bind '"\C-r": "\C-a hstr -- \C-j"'; fi
# if this is interactive shell, then bind 'kill last command' to Ctrl-x k
# if [[ $- =~ .*i.* ]]; then bind '"\C-xk": "\C-a hstr -k \C-j"'; fi
export PATH=$(brew --prefix openvpn)/sbin:$PATH

# Kubernetes Config
export KUBE_EDITOR=nvim
export USE_GKE_GCLOUD_AUTH_PLUGIN=True

# kubectl
source <(kubectl completion zsh)
[[ /usr/local/bin/kubectl ]] && source <(kubectl completion zsh)
complete -F __start_kubectl k

# kubectl new plugin gcp
USE_GKE_GCLOUD_AUTH_PLUGIN=True

### Tools ###
rbrew_upgrade() {
  brew update && brew upgrade
}

rbrew_doctor() {
  brew update && brew upgrade && brew cleanup; brew doctor
}

. /opt/homebrew/opt/asdf/libexec/asdf.sh

# https://github.com/jimeh/zsh-peco-history/blob/master/zsh-peco-history.zsh
if (( $+commands[peco] )); then
  if ! (( ${+ZSH_PECO_HISTORY_OPTS} )); then
    ZSH_PECO_HISTORY_OPTS="--layout=bottom-up"
  fi

  function peco_select_history() {
    local parse_cmd

    if (( $+commands[gtac] )); then
      parse_cmd="gtac"
    elif (( $+commands[tac] )); then
      parse_cmd="tac"
    else
      parse_cmd="tail -r" fi
    if [ -n "$ZSH_PECO_HISTORY_DEDUP" ]; then
      if (( $+commands[perl] )); then
        parse_cmd="$parse_cmd | perl -ne 'print unless \$seen{\$_}++'"
      elif (( $+commands[awk] )); then
        parse_cmd="$parse_cmd | awk '!seen[\$0]++'"
      else
        parse_cmd="$parse_cmd | uniq"
      fi
    fi

    BUFFER=$(fc -l -n 1 | eval $parse_cmd | \
               peco ${=ZSH_PECO_HISTORY_OPTS} --query "$LBUFFER")

    CURSOR=$#BUFFER # move cursor
    zle -R -c       # refresh
  }

  zle -N peco_select_history
  bindkey '^R' peco_select_history
fi

eval "$(starship init zsh)"
